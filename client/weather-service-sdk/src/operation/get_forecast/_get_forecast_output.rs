// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetForecastOutput {
    #[allow(missing_docs)] // documentation missing in model
    pub chance_of_rain: ::std::option::Option<f32>,
}
impl GetForecastOutput {
    #[allow(missing_docs)] // documentation missing in model
    pub fn chance_of_rain(&self) -> ::std::option::Option<f32> {
        self.chance_of_rain
    }
}
impl GetForecastOutput {
    /// Creates a new builder-style object to manufacture [`GetForecastOutput`](crate::operation::get_forecast::GetForecastOutput).
    pub fn builder() -> crate::operation::get_forecast::builders::GetForecastOutputBuilder {
        crate::operation::get_forecast::builders::GetForecastOutputBuilder::default()
    }
}

/// A builder for [`GetForecastOutput`](crate::operation::get_forecast::GetForecastOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GetForecastOutputBuilder {
    pub(crate) chance_of_rain: ::std::option::Option<f32>,
}
impl GetForecastOutputBuilder {
    #[allow(missing_docs)] // documentation missing in model
    pub fn chance_of_rain(mut self, input: f32) -> Self {
        self.chance_of_rain = ::std::option::Option::Some(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_chance_of_rain(mut self, input: ::std::option::Option<f32>) -> Self {
        self.chance_of_rain = input;
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_chance_of_rain(&self) -> &::std::option::Option<f32> {
        &self.chance_of_rain
    }
    /// Consumes the builder and constructs a [`GetForecastOutput`](crate::operation::get_forecast::GetForecastOutput).
    pub fn build(self) -> crate::operation::get_forecast::GetForecastOutput {
        crate::operation::get_forecast::GetForecastOutput {
            chance_of_rain: self.chance_of_rain,
        }
    }
}
