// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListCitiesOutput {
    #[allow(missing_docs)] // documentation missing in model
    pub next_token: ::std::option::Option<::std::string::String>,
    #[allow(missing_docs)] // documentation missing in model
    pub items: ::std::vec::Vec<crate::types::CitySummary>,
}
impl ListCitiesOutput {
    #[allow(missing_docs)] // documentation missing in model
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn items(&self) -> &[crate::types::CitySummary] {
        use std::ops::Deref;
        self.items.deref()
    }
}
impl ListCitiesOutput {
    /// Creates a new builder-style object to manufacture [`ListCitiesOutput`](crate::operation::list_cities::ListCitiesOutput).
    pub fn builder() -> crate::operation::list_cities::builders::ListCitiesOutputBuilder {
        crate::operation::list_cities::builders::ListCitiesOutputBuilder::default()
    }
}

/// A builder for [`ListCitiesOutput`](crate::operation::list_cities::ListCitiesOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ListCitiesOutputBuilder {
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) items: ::std::option::Option<::std::vec::Vec<crate::types::CitySummary>>,
}
impl ListCitiesOutputBuilder {
    #[allow(missing_docs)] // documentation missing in model
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// Appends an item to `items`.
    ///
    /// To override the contents of this collection use [`set_items`](Self::set_items).
    ///
    pub fn items(mut self, input: crate::types::CitySummary) -> Self {
        let mut v = self.items.unwrap_or_default();
        v.push(input);
        self.items = ::std::option::Option::Some(v);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_items(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::CitySummary>>) -> Self {
        self.items = input;
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_items(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::CitySummary>> {
        &self.items
    }
    /// Consumes the builder and constructs a [`ListCitiesOutput`](crate::operation::list_cities::ListCitiesOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`items`](crate::operation::list_cities::builders::ListCitiesOutputBuilder::items)
    pub fn build(self) -> ::std::result::Result<crate::operation::list_cities::ListCitiesOutput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::list_cities::ListCitiesOutput {
            next_token: self.next_token,
            items: self.items.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "items",
                    "items was not specified but it is required when building ListCitiesOutput",
                )
            })?,
        })
    }
}
