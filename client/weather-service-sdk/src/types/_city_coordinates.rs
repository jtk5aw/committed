// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CityCoordinates {
    #[allow(missing_docs)] // documentation missing in model
    pub latitude: f32,
    #[allow(missing_docs)] // documentation missing in model
    pub longitude: f32,
}
impl CityCoordinates {
    #[allow(missing_docs)] // documentation missing in model
    pub fn latitude(&self) -> f32 {
        self.latitude
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn longitude(&self) -> f32 {
        self.longitude
    }
}
impl CityCoordinates {
    /// Creates a new builder-style object to manufacture [`CityCoordinates`](crate::types::CityCoordinates).
    pub fn builder() -> crate::types::builders::CityCoordinatesBuilder {
        crate::types::builders::CityCoordinatesBuilder::default()
    }
}

/// A builder for [`CityCoordinates`](crate::types::CityCoordinates).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CityCoordinatesBuilder {
    pub(crate) latitude: ::std::option::Option<f32>,
    pub(crate) longitude: ::std::option::Option<f32>,
}
impl CityCoordinatesBuilder {
    #[allow(missing_docs)] // documentation missing in model
    /// This field is required.
    pub fn latitude(mut self, input: f32) -> Self {
        self.latitude = ::std::option::Option::Some(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_latitude(mut self, input: ::std::option::Option<f32>) -> Self {
        self.latitude = input;
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_latitude(&self) -> &::std::option::Option<f32> {
        &self.latitude
    }
    #[allow(missing_docs)] // documentation missing in model
    /// This field is required.
    pub fn longitude(mut self, input: f32) -> Self {
        self.longitude = ::std::option::Option::Some(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_longitude(mut self, input: ::std::option::Option<f32>) -> Self {
        self.longitude = input;
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_longitude(&self) -> &::std::option::Option<f32> {
        &self.longitude
    }
    /// Consumes the builder and constructs a [`CityCoordinates`](crate::types::CityCoordinates).
    /// This method will fail if any of the following fields are not set:
    /// - [`latitude`](crate::types::builders::CityCoordinatesBuilder::latitude)
    /// - [`longitude`](crate::types::builders::CityCoordinatesBuilder::longitude)
    pub fn build(self) -> ::std::result::Result<crate::types::CityCoordinates, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::CityCoordinates {
            latitude: self.latitude.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "latitude",
                    "latitude was not specified but it is required when building CityCoordinates",
                )
            })?,
            longitude: self.longitude.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "longitude",
                    "longitude was not specified but it is required when building CityCoordinates",
                )
            })?,
        })
    }
}
