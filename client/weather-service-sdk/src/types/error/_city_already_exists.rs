// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CityAlreadyExists {
    #[allow(missing_docs)] // documentation missing in model
    pub collision_type: ::std::string::String,
    #[allow(missing_docs)] // documentation missing in model
    pub message: ::std::option::Option<::std::string::String>,
    pub(crate) meta: ::aws_smithy_types::error::ErrorMetadata,
}
impl CityAlreadyExists {
    #[allow(missing_docs)] // documentation missing in model
    pub fn collision_type(&self) -> &str {
        use std::ops::Deref;
        self.collision_type.deref()
    }
}
impl CityAlreadyExists {
    /// Returns the error message.
    pub fn message(&self) -> ::std::option::Option<&str> {
        self.message.as_deref()
    }
}
impl ::std::fmt::Display for CityAlreadyExists {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        ::std::write!(f, "CityAlreadyExists")?;
        if let ::std::option::Option::Some(inner_1) = &self.message {
            {
                ::std::write!(f, ": {}", inner_1)?;
            }
        }
        Ok(())
    }
}
impl ::std::error::Error for CityAlreadyExists {}
impl ::aws_smithy_types::error::metadata::ProvideErrorMetadata for CityAlreadyExists {
    fn meta(&self) -> &::aws_smithy_types::error::ErrorMetadata {
        &self.meta
    }
}
impl CityAlreadyExists {
    /// Creates a new builder-style object to manufacture [`CityAlreadyExists`](crate::types::error::CityAlreadyExists).
    pub fn builder() -> crate::types::error::builders::CityAlreadyExistsBuilder {
        crate::types::error::builders::CityAlreadyExistsBuilder::default()
    }
}

/// A builder for [`CityAlreadyExists`](crate::types::error::CityAlreadyExists).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CityAlreadyExistsBuilder {
    pub(crate) collision_type: ::std::option::Option<::std::string::String>,
    pub(crate) message: ::std::option::Option<::std::string::String>,
    meta: std::option::Option<::aws_smithy_types::error::ErrorMetadata>,
}
impl CityAlreadyExistsBuilder {
    #[allow(missing_docs)] // documentation missing in model
    /// This field is required.
    pub fn collision_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.collision_type = ::std::option::Option::Some(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_collision_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.collision_type = input;
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_collision_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.collision_type
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.message = ::std::option::Option::Some(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.message = input;
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.message
    }
    /// Sets error metadata
    pub fn meta(mut self, meta: ::aws_smithy_types::error::ErrorMetadata) -> Self {
        self.meta = Some(meta);
        self
    }

    /// Sets error metadata
    pub fn set_meta(&mut self, meta: std::option::Option<::aws_smithy_types::error::ErrorMetadata>) -> &mut Self {
        self.meta = meta;
        self
    }
    /// Consumes the builder and constructs a [`CityAlreadyExists`](crate::types::error::CityAlreadyExists).
    /// This method will fail if any of the following fields are not set:
    /// - [`collision_type`](crate::types::error::builders::CityAlreadyExistsBuilder::collision_type)
    pub fn build(self) -> ::std::result::Result<crate::types::error::CityAlreadyExists, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::error::CityAlreadyExists {
            collision_type: self.collision_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "collision_type",
                    "collision_type was not specified but it is required when building CityAlreadyExists",
                )
            })?,
            message: self.message,
            meta: self.meta.unwrap_or_default(),
        })
    }
}
